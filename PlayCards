package toucansFinalProject;

import java.util.*;

// NOTES: I have assigned the methods. I thought it best to break them into: 
// DECK/HAND MECHANICS: ALEX
// SCORING/WINNING/GAMEFLOW: WILL
// GAMEPLAY/LOGIC/GUI: GABRIEL
// DISCARDING/END OF TURN: JONATHAN
// I created the Run and Set classes. I expect they will need methods for the GAMEPLAY/LOGIC piece

//Gabe- I fixed part of the code so I could test my code, I made notes next to what I changed/fixed

public class PlayCards {

	public static void main(String[] args) {
		
		Scanner scan = new Scanner(System.in);
		ArrayList<Player> players = new ArrayList<Player>();

		System.out.println("Welcome to Toucans Multi-Player Rummy");
		System.out.println("Would you like to: " + "\n1. Start a new game?\n2. Exit");
		int mainMenu = scan.nextInt();
		
		if (mainMenu == 2) {
			System.exit(0);
		}
		boolean more = true;

		while (more) {//base game while loop

			System.out.println("How many players will be playing this game (2-6)?");
			int numPlay = scan.nextInt();
			
			getNames(numPlay, players);
			// send the numPlayers to a method to determine amount of cards to be dealt DONE
			// based on # of players DONE
			int numCards = handSize(numPlay);

			//create runs/sets decks, for Gabe code
			ArrayList<Run> runs = new ArrayList<Run>();
			ArrayList<Set> sets = new ArrayList<Set>();
			
			// create a deck of cards DONE
			DeckOfCards deck = newDeck();

			// deal each player a hand (dependent on numPlay) DONE
			for (int i = 0; i < numPlay; i++) {
				players.get(i).setHand(getHand(numCards, deck));
			}

			// flip top card into discard and create deck for discard pile at beginning of
			// game DONE
			DeckOfCards discard = new DeckOfCards();
			Card top =(deck.drawCard());
			ArrayList<Card> temp = new ArrayList<Card>();
			temp.add(top);
			discard.setDeck(temp);
			
			System.out.println("How many points would you like to play to? ");
			int points = scan.nextInt();
			
			// set points for game DONE
			while (points > highScore(players)) {
				boolean cardsInHand = true;
				while (cardsInHand) {

					for (int i = 0; i < players.size(); i++) {
						if (cardsInHand == true) {//Gabe- changed this to true- it was a syntax error
							Player currentPlayer = players.get(i);
							int selection = 0;
							while (selection != 1 && selection != 2) {//Gabe- switched your or to an and otherwise this was an infinite loop
								selection = menuPhase1(currentPlayer);
								if (selection == 1) {
									// if deck is out of cards reshuffle all but top card of discard pile into new
									// deck object #1PC_ALEX
									// draw from the deck add to players hand #2PC_ALEX
									

									// if deck is out of cards reshuffle all but top card of discard pile into new deck object #1PC_ALEX
									
									if(deck.getDeck().size()==0) {
										
										Card newDiscard = discard.drawCard();
										deck.setDeck(discard.getDeck());
										deck.shuffle();
										temp.clear();
										temp.add(newDiscard);
										discard.setDeck(temp);	
									}
									
									// draw from the deck add to players hand #2PC_ALEX
									
									else {
										
										Card newCard = deck.drawCard();
										currentPlayer.getHand().drawCard(newCard);
										
										//Gabe - moved the 'discard' code since it should be in menu three, to line: 178
									}
									
								
								} else if (selection == 2) {
									// draw from discard add to players hand #3PC_ALEX
									
									Card newCard = discard.drawCard();
									currentPlayer.getHand().drawCard(newCard);
									// keep track of this card, they are not allowed to discard it this turn
									// #4PC_Jonathan
								} else if (selection == 3) {
									System.out.println(currentPlayer.getHand().displayHand());
								} else if (selection == 4) {
									// display sets/runs played on table #5PC_GABRIEL
									displayRunsSets(runs, sets);
								} else if (selection == 5) {
									System.out.println("Thanks for playing Toucan's Rummy!");
									System.exit(0);
								} else {
									System.out.println("Please pick an option 1-5)...");
								}

							}//end of menu 1 while loop
							int selection2 = 0;
							while (selection2 != 4) {
								selection2 = menuPhase2();
								if (selection2 == 1) {
									// These should loop until player is finished playing down cards.
									// lay a card down? #6PC_GABRIEL
									// into existing run #7PC_GABRIEL
									// into existing set #8PC_GABRIEL
									// new run #9PC_GABRIEL
									// new set #10PC_GABRIEL
									potentialRunSet(currentPlayer, runs, sets);
									
									
									// check if hand = 0 player won round #11PC_WILL DONE
									if (currentPlayer.getHand().getSize() == 0) {
										for (int j = 0; j < players.size(); j++) {
											if (i != j) { // tabulate scores #12PC_WILL DONE
												currentPlayer.setAmtMoney(currentPlayer.getAmtMoney()
														+ players.get(j).getHand().getScore());
												// if played all cards at once 2x score #13PC_WILL

											}
											cardsInHand = false;
										}

									}

									
								} else if (selection2 == 2) {
									System.out.println(currentPlayer.getHand().displayHand());
								} else if (selection2 == 3) {
									// display sets/runs played on table #5PC_GABRIEL
									displayRunsSets(runs, sets);
								} else if (selection2 == 4) {
									// done 4 ENDS WHILE LOOP
								} else if (selection2 == 5) {
									System.out.println("Thanks for playing Toucan's Rummy!");
									System.exit(0);
								} else {
									System.out.println("Please pick an option 1-5)...");
								}
							}//end of menu 2 while loop
							int selection3 = 0;
							while (selection3 != 1) {
								selection3 = menuPhase3();
								if (selection3 == 1) {
									boolean invalidAns = true;
									// allow the player to select a card and discard it to the discard pile
									// #15PC_Jonathan
									// check VS Card drawn tracked in item #4PC_Jonathan
									// pass to next player DONE: HANDLED BY WHILE LOOP ENDING AT 1
									//Gabe- Moved discard code here, be sure to add a sysout to prompt the user
									//Gabe- you can reference my code in setAndRun if you want a good idea to select a card be sure to use try/catches
									//Gabe- added a menu to see how to select a card, added a try catch, note there is a bug in the selection process, but I just wanted to make it runnable for now, so I could test my code
									while(invalidAns) {
										System.out.println("Type the number next to the card you wish to discard:\n");
										System.out.println(currentPlayer.getHand().displayHandNumber());
										System.out.println("\nType the number here:");
										// discard
										try{
											int discardSelection = scan.nextInt();
											//Gabe- add if statement to check if answer was in range.
											if(discardSelection > 0 && discardSelection <= currentPlayer.getHand().getCards().size()) {
												Card discardCard = currentPlayer.getHand().getCards().get(discardSelection);
												currentPlayer.getHand().DiscardCard(discardSelection);
												discard.getDeck().add(discardCard);
												invalidAns = false;//added to stop the loop
											}
										} catch(InputMismatchException e) {
											System.out.println("Invalid input enter an integer for one of the cards.");
											scan.nextLine();//to fix bugs
										}
									}
								} else if (selection3 == 2) {
									System.out.println(currentPlayer.getHand().displayHand());
								} else if (selection2 == 3) {
									// display sets/runs played on table #5PC_GABRIEL
									displayRunsSets(runs, sets);
								} else if (selection2 == 4) {
									System.out.println("Thanks for playing Toucan's Rummy!");
									System.exit(0);
								} else {
									System.out.println("Please pick an option 1-4)...");
								}

							}
						}//if cards in hand
					}

				}//end of cards in hand while
			}
			Player winner = winningPlayer(players);			
			System.out.println("The winner of that round was "+ winner.getName()+" with a total of $"
					+winner.getAmtMoney());
			System.out.println("Play again (true/false)? ");
			more = scan.nextBoolean();
			//Gabe - moved this scan.close() to right after the 'thanks for playing' text, for it creates more bugs here

		}//end of base game while loop
		System.out.println("Thanks for playing Toucan's Rummy!");
		scan.close();
	}

	public static void getNames(int c, ArrayList<Player> p) {
		Scanner scan = new Scanner(System.in);

		for (int i = 0; i < c; i++) {
			System.out.println("What is player " + (i + 1) + "'s name? ");
			String name = scan.nextLine();
			Player player = new Player(name, 0);
			p.add(player);

		}
		//Gabe - got rid of scan.close() it created syntax errors
	}

	public static int handSize(int nP) {
		int handSize = 0;
		if (nP < 3) {
			handSize = 10;
		} else if (nP < 5) {
			handSize = 7;
		} else if (nP >= 5) {
			handSize = 6;
		}
		return handSize;
	}

	public static DeckOfCards newDeck() {
		DeckOfCards deck = new DeckOfCards();
		deck.shuffle();
		return deck;
	}

	public static Hand getHand(int nC, DeckOfCards d) {
		Hand hand = new Hand();
		ArrayList<Card> cards = new ArrayList<Card>();
		for (int i = 0; i < nC; i++) {
			cards.add(d.drawCard());
		}
		hand.setCards(cards);
		return hand;

	}

	public static int menuPhase1(Player p) {
		int selection = 0;
		Scanner scan = new Scanner(System.in);

		System.out.println(p.getName() + ", it's your turn: ");

		System.out.println("What would you like to do? ");

		System.out.println("1. Draw from the deck");
		System.out.println("2. Draw top card from the discard pile");
		System.out.println("3. What cards are in my hand?");
		System.out.println("4. What runs are on the table?");
		System.out.println("5. Exit game");
		System.out.println("\nWhich option would like?");
		selection = scan.nextInt();
		//Gabe - removed scan.close() for it creates errors here
		return selection;
	}

	public static int menuPhase2() {
		int selection = 0;
		Scanner scan = new Scanner(System.in);
		System.out.println("What would you like to do? ");
		System.out.println("1. Play or add to a set from my hand");
		System.out.println("2. What cards are in my hand? ");
		System.out.println("3. What runs are on the table?");
		System.out.println("4. Done, select a card to discard and pass turn");
		System.out.println("5. Exit game");
		System.out.println("\nWhich option would like?");
		selection = scan.nextInt();
		//Gabe- got rid of another scan.close() that was creating bugs
		return selection;
	}

	public static int menuPhase3() {
		int selection = 0;
		Scanner scan = new Scanner(System.in);
		System.out.println("What would you like to do? ");
		System.out.println("1. Select a card to discard and pass turn");
		System.out.println("2. What cards are in my hand? ");
		System.out.println("3. What runs are on the table?");
		System.out.println("5. Exit game");
		System.out.println("\nWhich option would like?");
		selection = scan.nextInt();
		//Gabe - got rid of another scan.close() that was creating bugs
		return selection;
	}

	private static double highScore(ArrayList<Player> p) {
		double score = 0;
		for (int i = 0; i < p.size(); i++) {
			if (p.get(i).getAmtMoney() > score) {
				score = p.get(i).getAmtMoney();
			}
		}
		return score;
	}

	public static Player winningPlayer(ArrayList<Player> p) {
		Player winningPlayer = new Player("Loser", 0);
		for (int i = 0; i < p.size(); i++) {
			if (p.get(i).getAmtMoney() > winningPlayer.getAmtMoney()) {
				winningPlayer = p.get(i);
			}
		}
		return winningPlayer;

	}

	public static void displayRunsSets(ArrayList<Run> runs, ArrayList<Set> sets) {//#5PC_GABRIEL
		//Variable declaration
		int index = 0;
		
		System.out.println("Runs: ");
		for(Run r: runs) {
			index++;
			System.out.println("Run " + index + ": \n" + r.toString());
		}
		index = 0;
		
		System.out.println("Sets: ");
		for(Set s: sets) {
			index++;
			System.out.println("Set " + index + ": \n" + s.toString());
		}
	
	}
	
	public static void potentialRunSet(Player currentPlayer, ArrayList<Run> runs, ArrayList<Set> sets) {//Guides player to make a set/run, if possible
		//Variable Declaration
		Hand playerHand = currentPlayer.getHand();
		Hand potentialRS = new Hand(new ArrayList<Card>());
		int choice = 0;
		
		while(choice != 7) {
			choice = potentialRSMenu(potentialRS);
			
			switch(choice) 
			{
				case 1://select cards
					potentialRS = setAndRun.selectCards(playerHand, potentialRS);
					break;
				case 2://deselect cards
					potentialRS = setAndRun.deselectCards(playerHand, potentialRS);
					break;
				case 3://make a set
					setAndRun.makeSet(potentialRS, sets, playerHand);
					break;
				case 4://make a run
					setAndRun.makeRun(potentialRS, runs, playerHand);
					break;
				case 5://add to a set
					setAndRun.addSet(potentialRS, sets, playerHand);
					break;
				case 6://add to a run
					setAndRun.addRun(potentialRS, runs, playerHand);
					break;
				case 7://return to previous menu
					//will finish and return to last menu due how the loop is set up
					break;
			}//end of switch
		}//end of while loop
	}//end of method
	
	public static int potentialRSMenu(Hand potentialRS) {//Displays menu for potential runs and sets and returns a valid response
		int choice;
		Scanner scan = new Scanner(System.in);
		
		while(true) {
			try {
				System.out.println("\nIn order to perform a run or set first select the card(s) you'd like to use."
						+ "\n1. Select Cards" 
						+ "\n2. Return Cards to hand" 
						+ "\n3. Make a Set" 
						+ "\n4. Make a Run"
						+ "\n5. Add to a Set " 
						+ "\n6. Add to a Run" 
						+ "\n7. Finish"
						+ "\n\nThese are the cards you have selected:\n " + potentialRS.displayHand());
				choice = scan.nextInt();
				
				if(choice >= 1 && choice <= 7) {//if its a valid choice
					scan.nextLine();//Fixes any potential bugs
					return choice;
				} else {
					System.out.println("Invalid Answer, the integer must be between 1-7.");
				}
			}//end of try
			catch(InputMismatchException e) {
				System.out.println("Invalid Answer, input an integer between 1-7.");
				scan.nextLine();
			}
		} //end of while
	}//end of method
}//end of class
